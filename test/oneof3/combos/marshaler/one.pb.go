// Code generated by protoc-gen-gogo.
// source: combos/marshaler/one.proto
// DO NOT EDIT!

/*
Package one is a generated protocol buffer package.

It is generated from these files:
	combos/marshaler/one.proto

It has these top-level messages:
	Subby
	SampleOneOf
*/
package one

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Subby struct {
	Sub string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (m *Subby) Reset()                    { *m = Subby{} }
func (*Subby) ProtoMessage()               {}
func (*Subby) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{0} }

type SampleOneOf struct {
	// Types that are valid to be assigned to TestOneof:
	//	*SampleOneOf_Field1
	//	*SampleOneOf_Field2
	//	*SampleOneOf_Field3
	//	*SampleOneOf_Field4
	//	*SampleOneOf_Field5
	//	*SampleOneOf_Field6
	//	*SampleOneOf_Field7
	//	*SampleOneOf_Field8
	//	*SampleOneOf_Field9
	//	*SampleOneOf_Field10
	//	*SampleOneOf_Field11
	//	*SampleOneOf_Field12
	//	*SampleOneOf_Field13
	//	*SampleOneOf_Field14
	//	*SampleOneOf_Field15
	//	*SampleOneOf_SubMessage
	TestOneof isSampleOneOf_TestOneof `protobuf_oneof:"test_oneof"`
}

func (m *SampleOneOf) Reset()                    { *m = SampleOneOf{} }
func (*SampleOneOf) ProtoMessage()               {}
func (*SampleOneOf) Descriptor() ([]byte, []int) { return fileDescriptorOne, []int{1} }

type isSampleOneOf_TestOneof interface {
	isSampleOneOf_TestOneof()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type SampleOneOf_Field1 struct {
	Field1 float64 `protobuf:"fixed64,1,opt,name=Field1,proto3,oneof"`
}
type SampleOneOf_Field2 struct {
	Field2 float32 `protobuf:"fixed32,2,opt,name=Field2,proto3,oneof"`
}
type SampleOneOf_Field3 struct {
	Field3 int32 `protobuf:"varint,3,opt,name=Field3,proto3,oneof"`
}
type SampleOneOf_Field4 struct {
	Field4 int64 `protobuf:"varint,4,opt,name=Field4,proto3,oneof"`
}
type SampleOneOf_Field5 struct {
	Field5 uint32 `protobuf:"varint,5,opt,name=Field5,proto3,oneof"`
}
type SampleOneOf_Field6 struct {
	Field6 uint64 `protobuf:"varint,6,opt,name=Field6,proto3,oneof"`
}
type SampleOneOf_Field7 struct {
	Field7 int32 `protobuf:"zigzag32,7,opt,name=Field7,proto3,oneof"`
}
type SampleOneOf_Field8 struct {
	Field8 int64 `protobuf:"zigzag64,8,opt,name=Field8,proto3,oneof"`
}
type SampleOneOf_Field9 struct {
	Field9 uint32 `protobuf:"fixed32,9,opt,name=Field9,proto3,oneof"`
}
type SampleOneOf_Field10 struct {
	Field10 int32 `protobuf:"fixed32,10,opt,name=Field10,proto3,oneof"`
}
type SampleOneOf_Field11 struct {
	Field11 uint64 `protobuf:"fixed64,11,opt,name=Field11,proto3,oneof"`
}
type SampleOneOf_Field12 struct {
	Field12 int64 `protobuf:"fixed64,12,opt,name=Field12,proto3,oneof"`
}
type SampleOneOf_Field13 struct {
	Field13 bool `protobuf:"varint,13,opt,name=Field13,proto3,oneof"`
}
type SampleOneOf_Field14 struct {
	Field14 string `protobuf:"bytes,14,opt,name=Field14,proto3,oneof"`
}
type SampleOneOf_Field15 struct {
	Field15 []byte `protobuf:"bytes,15,opt,name=Field15,proto3,oneof"`
}
type SampleOneOf_SubMessage struct {
	SubMessage *Subby `protobuf:"bytes,16,opt,name=sub_message,json=subMessage,oneof"`
}

func (*SampleOneOf_Field1) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field2) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field3) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field4) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field5) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field6) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field7) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field8) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field9) isSampleOneOf_TestOneof()     {}
func (*SampleOneOf_Field10) isSampleOneOf_TestOneof()    {}
func (*SampleOneOf_Field11) isSampleOneOf_TestOneof()    {}
func (*SampleOneOf_Field12) isSampleOneOf_TestOneof()    {}
func (*SampleOneOf_Field13) isSampleOneOf_TestOneof()    {}
func (*SampleOneOf_Field14) isSampleOneOf_TestOneof()    {}
func (*SampleOneOf_Field15) isSampleOneOf_TestOneof()    {}
func (*SampleOneOf_SubMessage) isSampleOneOf_TestOneof() {}

func (m *SampleOneOf) GetTestOneof() isSampleOneOf_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *SampleOneOf) GetField1() float64 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field1); ok {
		return x.Field1
	}
	return 0
}

func (m *SampleOneOf) GetField2() float32 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field2); ok {
		return x.Field2
	}
	return 0
}

func (m *SampleOneOf) GetField3() int32 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field3); ok {
		return x.Field3
	}
	return 0
}

func (m *SampleOneOf) GetField4() int64 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field4); ok {
		return x.Field4
	}
	return 0
}

func (m *SampleOneOf) GetField5() uint32 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field5); ok {
		return x.Field5
	}
	return 0
}

func (m *SampleOneOf) GetField6() uint64 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field6); ok {
		return x.Field6
	}
	return 0
}

func (m *SampleOneOf) GetField7() int32 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field7); ok {
		return x.Field7
	}
	return 0
}

func (m *SampleOneOf) GetField8() int64 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field8); ok {
		return x.Field8
	}
	return 0
}

func (m *SampleOneOf) GetField9() uint32 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field9); ok {
		return x.Field9
	}
	return 0
}

func (m *SampleOneOf) GetField10() int32 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field10); ok {
		return x.Field10
	}
	return 0
}

func (m *SampleOneOf) GetField11() uint64 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field11); ok {
		return x.Field11
	}
	return 0
}

func (m *SampleOneOf) GetField12() int64 {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field12); ok {
		return x.Field12
	}
	return 0
}

func (m *SampleOneOf) GetField13() bool {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field13); ok {
		return x.Field13
	}
	return false
}

func (m *SampleOneOf) GetField14() string {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field14); ok {
		return x.Field14
	}
	return ""
}

func (m *SampleOneOf) GetField15() []byte {
	if x, ok := m.GetTestOneof().(*SampleOneOf_Field15); ok {
		return x.Field15
	}
	return nil
}

func (m *SampleOneOf) GetSubMessage() *Subby {
	if x, ok := m.GetTestOneof().(*SampleOneOf_SubMessage); ok {
		return x.SubMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SampleOneOf) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SampleOneOf_OneofMarshaler, _SampleOneOf_OneofUnmarshaler, _SampleOneOf_OneofSizer, []interface{}{
		(*SampleOneOf_Field1)(nil),
		(*SampleOneOf_Field2)(nil),
		(*SampleOneOf_Field3)(nil),
		(*SampleOneOf_Field4)(nil),
		(*SampleOneOf_Field5)(nil),
		(*SampleOneOf_Field6)(nil),
		(*SampleOneOf_Field7)(nil),
		(*SampleOneOf_Field8)(nil),
		(*SampleOneOf_Field9)(nil),
		(*SampleOneOf_Field10)(nil),
		(*SampleOneOf_Field11)(nil),
		(*SampleOneOf_Field12)(nil),
		(*SampleOneOf_Field13)(nil),
		(*SampleOneOf_Field14)(nil),
		(*SampleOneOf_Field15)(nil),
		(*SampleOneOf_SubMessage)(nil),
	}
}

func _SampleOneOf_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SampleOneOf)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *SampleOneOf_Field1:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.Field1))
	case *SampleOneOf_Field2:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.Field2)))
	case *SampleOneOf_Field3:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field3))
	case *SampleOneOf_Field4:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field4))
	case *SampleOneOf_Field5:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field5))
	case *SampleOneOf_Field6:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Field6))
	case *SampleOneOf_Field7:
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeZigzag32(uint64(x.Field7))
	case *SampleOneOf_Field8:
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeZigzag64(uint64(x.Field8))
	case *SampleOneOf_Field9:
		_ = b.EncodeVarint(9<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.Field9))
	case *SampleOneOf_Field10:
		_ = b.EncodeVarint(10<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.Field10))
	case *SampleOneOf_Field11:
		_ = b.EncodeVarint(11<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.Field11))
	case *SampleOneOf_Field12:
		_ = b.EncodeVarint(12<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.Field12))
	case *SampleOneOf_Field13:
		t := uint64(0)
		if x.Field13 {
			t = 1
		}
		_ = b.EncodeVarint(13<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *SampleOneOf_Field14:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Field14)
	case *SampleOneOf_Field15:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Field15)
	case *SampleOneOf_SubMessage:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SampleOneOf.TestOneof has unexpected type %T", x)
	}
	return nil
}

func _SampleOneOf_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SampleOneOf)
	switch tag {
	case 1: // test_oneof.Field1
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = &SampleOneOf_Field1{math.Float64frombits(x)}
		return true, err
	case 2: // test_oneof.Field2
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = &SampleOneOf_Field2{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // test_oneof.Field3
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &SampleOneOf_Field3{int32(x)}
		return true, err
	case 4: // test_oneof.Field4
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &SampleOneOf_Field4{int64(x)}
		return true, err
	case 5: // test_oneof.Field5
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &SampleOneOf_Field5{uint32(x)}
		return true, err
	case 6: // test_oneof.Field6
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &SampleOneOf_Field6{x}
		return true, err
	case 7: // test_oneof.Field7
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag32()
		m.TestOneof = &SampleOneOf_Field7{int32(x)}
		return true, err
	case 8: // test_oneof.Field8
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeZigzag64()
		m.TestOneof = &SampleOneOf_Field8{int64(x)}
		return true, err
	case 9: // test_oneof.Field9
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = &SampleOneOf_Field9{uint32(x)}
		return true, err
	case 10: // test_oneof.Field10
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.TestOneof = &SampleOneOf_Field10{int32(x)}
		return true, err
	case 11: // test_oneof.Field11
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = &SampleOneOf_Field11{x}
		return true, err
	case 12: // test_oneof.Field12
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.TestOneof = &SampleOneOf_Field12{int64(x)}
		return true, err
	case 13: // test_oneof.Field13
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TestOneof = &SampleOneOf_Field13{x != 0}
		return true, err
	case 14: // test_oneof.Field14
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TestOneof = &SampleOneOf_Field14{x}
		return true, err
	case 15: // test_oneof.Field15
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.TestOneof = &SampleOneOf_Field15{x}
		return true, err
	case 16: // test_oneof.sub_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Subby)
		err := b.DecodeMessage(msg)
		m.TestOneof = &SampleOneOf_SubMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SampleOneOf_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SampleOneOf)
	// test_oneof
	switch x := m.TestOneof.(type) {
	case *SampleOneOf_Field1:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *SampleOneOf_Field2:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *SampleOneOf_Field3:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field3))
	case *SampleOneOf_Field4:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field4))
	case *SampleOneOf_Field5:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field5))
	case *SampleOneOf_Field6:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Field6))
	case *SampleOneOf_Field7:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64((uint32(x.Field7) << 1) ^ uint32((int32(x.Field7) >> 31))))
	case *SampleOneOf_Field8:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(uint64(x.Field8<<1) ^ uint64((int64(x.Field8) >> 63))))
	case *SampleOneOf_Field9:
		n += proto.SizeVarint(9<<3 | proto.WireFixed32)
		n += 4
	case *SampleOneOf_Field10:
		n += proto.SizeVarint(10<<3 | proto.WireFixed32)
		n += 4
	case *SampleOneOf_Field11:
		n += proto.SizeVarint(11<<3 | proto.WireFixed64)
		n += 8
	case *SampleOneOf_Field12:
		n += proto.SizeVarint(12<<3 | proto.WireFixed64)
		n += 8
	case *SampleOneOf_Field13:
		n += proto.SizeVarint(13<<3 | proto.WireVarint)
		n += 1
	case *SampleOneOf_Field14:
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Field14)))
		n += len(x.Field14)
	case *SampleOneOf_Field15:
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Field15)))
		n += len(x.Field15)
	case *SampleOneOf_SubMessage:
		s := proto.Size(x.SubMessage)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Subby)(nil), "one.Subby")
	proto.RegisterType((*SampleOneOf)(nil), "one.SampleOneOf")
}
func (this *Subby) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func (this *SampleOneOf) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return OneDescription()
}
func OneDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3681 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x5d, 0x6c, 0x23, 0xd7,
		0x75, 0xd6, 0xf0, 0x4f, 0xe4, 0x21, 0x45, 0x8d, 0xae, 0xe4, 0xf5, 0xac, 0x1c, 0x73, 0xb5, 0x8a,
		0x5d, 0xcb, 0x76, 0xad, 0xb5, 0xb5, 0xd2, 0xfe, 0x70, 0x9b, 0x18, 0x94, 0x44, 0x6b, 0x65, 0x48,
		0xa2, 0x3a, 0x94, 0x12, 0x3b, 0x79, 0x18, 0x0c, 0x87, 0x97, 0xd4, 0xec, 0x0e, 0x67, 0xd8, 0x99,
		0xe1, 0xda, 0xf2, 0xd3, 0x06, 0xee, 0x0f, 0x82, 0xa0, 0xff, 0x05, 0xea, 0x38, 0x4e, 0x9a, 0x06,
		0x68, 0x9d, 0xa6, 0x7f, 0x49, 0xff, 0x50, 0xf4, 0xa9, 0x2f, 0x69, 0xfd, 0x54, 0x24, 0x6f, 0x7d,
		0xc8, 0x43, 0x56, 0x35, 0x50, 0xb7, 0x4d, 0x5b, 0xb7, 0x35, 0xd0, 0x00, 0x7e, 0x29, 0xee, 0xdf,
		0xcc, 0xf0, 0x47, 0x1a, 0x2a, 0x40, 0xe2, 0x3e, 0x49, 0xf7, 0x9c, 0xf3, 0x7d, 0x73, 0xef, 0xb9,
		0xe7, 0x9e, 0x73, 0xe6, 0x0e, 0xe1, 0x73, 0xab, 0xb0, 0xd0, 0x76, 0x9c, 0xb6, 0x85, 0xaf, 0x74,
		0x5d, 0xc7, 0x77, 0x1a, 0xbd, 0xd6, 0x95, 0x26, 0xf6, 0x0c, 0xd7, 0xec, 0xfa, 0x8e, 0xbb, 0x4c,
		0x65, 0x68, 0x9a, 0x59, 0x2c, 0x0b, 0x8b, 0xc5, 0x5d, 0x98, 0x79, 0xc1, 0xb4, 0xf0, 0x66, 0x60,
		0x58, 0xc7, 0x3e, 0xba, 0x01, 0xa9, 0x96, 0x69, 0x61, 0x45, 0x5a, 0x48, 0x2e, 0xe5, 0x57, 0x1e,
		0x5b, 0x1e, 0x00, 0x2d, 0xf7, 0x23, 0xf6, 0x89, 0x58, 0xa5, 0x88, 0xc5, 0x77, 0x53, 0x30, 0x3b,
		0x42, 0x8b, 0x10, 0xa4, 0x6c, 0xbd, 0x43, 0x18, 0xa5, 0xa5, 0x9c, 0x4a, 0xff, 0x47, 0x0a, 0x4c,
		0x76, 0x75, 0xe3, 0xae, 0xde, 0xc6, 0x4a, 0x82, 0x8a, 0xc5, 0x10, 0x95, 0x00, 0x9a, 0xb8, 0x8b,
		0xed, 0x26, 0xb6, 0x8d, 0x63, 0x25, 0xb9, 0x90, 0x5c, 0xca, 0xa9, 0x11, 0x09, 0x7a, 0x1a, 0x66,
		0xba, 0xbd, 0x86, 0x65, 0x1a, 0x5a, 0xc4, 0x0c, 0x16, 0x92, 0x4b, 0x69, 0x55, 0x66, 0x8a, 0xcd,
		0xd0, 0xf8, 0x09, 0x98, 0x7e, 0x05, 0xeb, 0x77, 0xa3, 0xa6, 0x79, 0x6a, 0x5a, 0x24, 0xe2, 0x88,
		0xe1, 0x06, 0x14, 0x3a, 0xd8, 0xf3, 0xf4, 0x36, 0xd6, 0xfc, 0xe3, 0x2e, 0x56, 0x52, 0x74, 0xf5,
		0x0b, 0x43, 0xab, 0x1f, 0x5c, 0x79, 0x9e, 0xa3, 0x0e, 0x8e, 0xbb, 0x18, 0x55, 0x20, 0x87, 0xed,
		0x5e, 0x87, 0x31, 0xa4, 0x4f, 0xf1, 0x5f, 0xd5, 0xee, 0x75, 0x06, 0x59, 0xb2, 0x04, 0xc6, 0x29,
		0x26, 0x3d, 0xec, 0xde, 0x33, 0x0d, 0xac, 0x64, 0x28, 0xc1, 0x13, 0x43, 0x04, 0x75, 0xa6, 0x1f,
		0xe4, 0x10, 0x38, 0xb4, 0x01, 0x39, 0xfc, 0xaa, 0x8f, 0x6d, 0xcf, 0x74, 0x6c, 0x65, 0x92, 0x92,
		0x3c, 0x3e, 0x62, 0x17, 0xb1, 0xd5, 0x1c, 0xa4, 0x08, 0x71, 0xe8, 0x1a, 0x4c, 0x3a, 0x5d, 0xdf,
		0x74, 0x6c, 0x4f, 0xc9, 0x2e, 0x48, 0x4b, 0xf9, 0x95, 0x8f, 0x8d, 0x0c, 0x84, 0x1a, 0xb3, 0x51,
		0x85, 0x31, 0xda, 0x06, 0xd9, 0x73, 0x7a, 0xae, 0x81, 0x35, 0xc3, 0x69, 0x62, 0xcd, 0xb4, 0x5b,
		0x8e, 0x92, 0xa3, 0x04, 0x97, 0x86, 0x17, 0x42, 0x0d, 0x37, 0x9c, 0x26, 0xde, 0xb6, 0x5b, 0x8e,
		0x5a, 0xf4, 0xfa, 0xc6, 0xe8, 0x02, 0x64, 0xbc, 0x63, 0xdb, 0xd7, 0x5f, 0x55, 0x0a, 0x34, 0x42,
		0xf8, 0x68, 0xf1, 0x7f, 0xd3, 0x30, 0x3d, 0x4e, 0x88, 0xdd, 0x82, 0x74, 0x8b, 0xac, 0x52, 0x49,
		0x9c, 0xc7, 0x07, 0x0c, 0xd3, 0xef, 0xc4, 0xcc, 0x8f, 0xe8, 0xc4, 0x0a, 0xe4, 0x6d, 0xec, 0xf9,
		0xb8, 0xc9, 0x22, 0x22, 0x39, 0x66, 0x4c, 0x01, 0x03, 0x0d, 0x87, 0x54, 0xea, 0x47, 0x0a, 0xa9,
		0x97, 0x60, 0x3a, 0x98, 0x92, 0xe6, 0xea, 0x76, 0x5b, 0xc4, 0xe6, 0x95, 0xb8, 0x99, 0x2c, 0x57,
		0x05, 0x4e, 0x25, 0x30, 0xb5, 0x88, 0xfb, 0xc6, 0x68, 0x13, 0xc0, 0xb1, 0xb1, 0xd3, 0xd2, 0x9a,
		0xd8, 0xb0, 0x94, 0xec, 0x29, 0x5e, 0xaa, 0x11, 0x93, 0x21, 0x2f, 0x39, 0x4c, 0x6a, 0x58, 0xe8,
		0x66, 0x18, 0x6a, 0x93, 0xa7, 0x44, 0xca, 0x2e, 0x3b, 0x64, 0x43, 0xd1, 0x76, 0x08, 0x45, 0x17,
		0x93, 0xb8, 0xc7, 0x4d, 0xbe, 0xb2, 0x1c, 0x9d, 0xc4, 0x72, 0xec, 0xca, 0x54, 0x0e, 0x63, 0x0b,
		0x9b, 0x72, 0xa3, 0x43, 0xf4, 0x71, 0x08, 0x04, 0x1a, 0x0d, 0x2b, 0xa0, 0x59, 0xa8, 0x20, 0x84,
		0x7b, 0x7a, 0x07, 0xcf, 0xdf, 0x80, 0x62, 0xbf, 0x7b, 0xd0, 0x1c, 0xa4, 0x3d, 0x5f, 0x77, 0x7d,
		0x1a, 0x85, 0x69, 0x95, 0x0d, 0x90, 0x0c, 0x49, 0x6c, 0x37, 0x69, 0x96, 0x4b, 0xab, 0xe4, 0xdf,
		0xf9, 0xeb, 0x30, 0xd5, 0xf7, 0xf8, 0x71, 0x81, 0x8b, 0x6f, 0x64, 0x60, 0x6e, 0x54, 0xcc, 0x8d,
		0x0c, 0xff, 0x0b, 0x90, 0xb1, 0x7b, 0x9d, 0x06, 0x76, 0x95, 0x24, 0x65, 0xe0, 0x23, 0x54, 0x81,
		0xb4, 0xa5, 0x37, 0xb0, 0xa5, 0xa4, 0x16, 0xa4, 0xa5, 0xe2, 0xca, 0xd3, 0x63, 0x45, 0xf5, 0xf2,
		0x0e, 0x81, 0xa8, 0x0c, 0x89, 0x3e, 0x09, 0x29, 0x9e, 0xe2, 0x08, 0xc3, 0x53, 0xe3, 0x31, 0x90,
		0x58, 0x54, 0x29, 0x0e, 0x3d, 0x02, 0x39, 0xf2, 0x97, 0xf9, 0x36, 0x43, 0xe7, 0x9c, 0x25, 0x02,
		0xe2, 0x57, 0x34, 0x0f, 0x59, 0x1a, 0x66, 0x4d, 0x2c, 0x4a, 0x43, 0x30, 0x26, 0x1b, 0xd3, 0xc4,
		0x2d, 0xbd, 0x67, 0xf9, 0xda, 0x3d, 0xdd, 0xea, 0x61, 0x1a, 0x30, 0x39, 0xb5, 0xc0, 0x85, 0x9f,
		0x22, 0x32, 0x74, 0x09, 0xf2, 0x2c, 0x2a, 0x4d, 0xbb, 0x89, 0x5f, 0xa5, 0xd9, 0x27, 0xad, 0xb2,
		0x40, 0xdd, 0x26, 0x12, 0xf2, 0xf8, 0x3b, 0x9e, 0x63, 0x8b, 0xad, 0xa5, 0x8f, 0x20, 0x02, 0xfa,
		0xf8, 0xeb, 0x83, 0x89, 0xef, 0xd1, 0xd1, 0xcb, 0x1b, 0x8c, 0xc5, 0xc5, 0xbf, 0x4a, 0x40, 0x8a,
		0x9e, 0xb7, 0x69, 0xc8, 0x1f, 0xbc, 0xbc, 0x5f, 0xd5, 0x36, 0x6b, 0x87, 0xeb, 0x3b, 0x55, 0x59,
		0x42, 0x45, 0x00, 0x2a, 0x78, 0x61, 0xa7, 0x56, 0x39, 0x90, 0x13, 0xc1, 0x78, 0x7b, 0xef, 0xe0,
		0xda, 0xaa, 0x9c, 0x0c, 0x00, 0x87, 0x4c, 0x90, 0x8a, 0x1a, 0x5c, 0x5d, 0x91, 0xd3, 0x48, 0x86,
		0x02, 0x23, 0xd8, 0x7e, 0xa9, 0xba, 0x79, 0x6d, 0x55, 0xce, 0xf4, 0x4b, 0xae, 0xae, 0xc8, 0x93,
		0x68, 0x0a, 0x72, 0x54, 0xb2, 0x5e, 0xab, 0xed, 0xc8, 0xd9, 0x80, 0xb3, 0x7e, 0xa0, 0x6e, 0xef,
		0x6d, 0xc9, 0xb9, 0x80, 0x73, 0x4b, 0xad, 0x1d, 0xee, 0xcb, 0x10, 0x30, 0xec, 0x56, 0xeb, 0xf5,
		0xca, 0x56, 0x55, 0xce, 0x07, 0x16, 0xeb, 0x2f, 0x1f, 0x54, 0xeb, 0x72, 0xa1, 0x6f, 0x5a, 0x57,
		0x57, 0xe4, 0xa9, 0xe0, 0x11, 0xd5, 0xbd, 0xc3, 0x5d, 0xb9, 0x88, 0x66, 0x60, 0x8a, 0x3d, 0x42,
		0x4c, 0x62, 0x7a, 0x40, 0x74, 0x6d, 0x55, 0x96, 0xc3, 0x89, 0x30, 0x96, 0x99, 0x3e, 0xc1, 0xb5,
		0x55, 0x19, 0x2d, 0x6e, 0x40, 0x9a, 0x46, 0x17, 0x42, 0x50, 0xdc, 0xa9, 0xac, 0x57, 0x77, 0xb4,
		0xda, 0xfe, 0xc1, 0x76, 0x6d, 0xaf, 0xb2, 0x23, 0x4b, 0xa1, 0x4c, 0xad, 0xfe, 0xec, 0xe1, 0xb6,
		0x5a, 0xdd, 0x94, 0x13, 0x51, 0xd9, 0x7e, 0xb5, 0x72, 0x50, 0xdd, 0x94, 0x93, 0x8b, 0x06, 0xcc,
		0x8d, 0xca, 0x33, 0x23, 0x4f, 0x46, 0x64, 0x8b, 0x13, 0xa7, 0x6c, 0x31, 0xe5, 0x1a, 0xda, 0xe2,
		0xaf, 0x49, 0x30, 0x3b, 0x22, 0xd7, 0x8e, 0x7c, 0xc8, 0xf3, 0x90, 0x66, 0x21, 0xca, 0xaa, 0xcf,
		0x93, 0x23, 0x93, 0x36, 0x0d, 0xd8, 0xa1, 0x0a, 0x44, 0x71, 0xd1, 0x0a, 0x9c, 0x3c, 0xa5, 0x02,
		0x13, 0x8a, 0xa1, 0x49, 0xbe, 0x2e, 0x81, 0x72, 0x1a, 0x77, 0x4c, 0xa2, 0x48, 0xf4, 0x25, 0x8a,
		0x5b, 0x83, 0x13, 0xb8, 0x7c, 0xfa, 0x1a, 0x86, 0x66, 0xf1, 0xb6, 0x04, 0x17, 0x46, 0x37, 0x2a,
		0x23, 0xe7, 0xf0, 0x49, 0xc8, 0x74, 0xb0, 0x7f, 0xe4, 0x88, 0x62, 0xfd, 0x53, 0x23, 0x4a, 0x00,
		0x51, 0x0f, 0xfa, 0x8a, 0xa3, 0xa2, 0x35, 0x24, 0x79, 0x5a, 0xb7, 0xc1, 0x66, 0x33, 0x34, 0xd3,
		0xcf, 0x27, 0xe0, 0xa1, 0x91, 0xe4, 0x23, 0x27, 0xfa, 0x28, 0x80, 0x69, 0x77, 0x7b, 0x3e, 0x2b,
		0xc8, 0x2c, 0x3f, 0xe5, 0xa8, 0x84, 0x9e, 0x7d, 0x92, 0x7b, 0x7a, 0x7e, 0xa0, 0x4f, 0x52, 0x3d,
		0x30, 0x11, 0x35, 0xb8, 0x11, 0x4e, 0x34, 0x45, 0x27, 0x5a, 0x3a, 0x65, 0xa5, 0x43, 0xb5, 0xee,
		0x59, 0x90, 0x0d, 0xcb, 0xc4, 0xb6, 0xaf, 0x79, 0xbe, 0x8b, 0xf5, 0x8e, 0x69, 0xb7, 0x69, 0x02,
		0xce, 0x96, 0xd3, 0x2d, 0xdd, 0xf2, 0xb0, 0x3a, 0xcd, 0xd4, 0x75, 0xa1, 0x25, 0x08, 0x5a, 0x65,
		0xdc, 0x08, 0x22, 0xd3, 0x87, 0x60, 0xea, 0x00, 0xb1, 0xf8, 0x85, 0x49, 0xc8, 0x47, 0xda, 0x3a,
		0x74, 0x19, 0x0a, 0x77, 0xf4, 0x7b, 0xba, 0x26, 0x5a, 0x75, 0xe6, 0x89, 0x3c, 0x91, 0xed, 0xf3,
		0x76, 0xfd, 0x59, 0x98, 0xa3, 0x26, 0x4e, 0xcf, 0xc7, 0xae, 0x66, 0x58, 0xba, 0xe7, 0x51, 0xa7,
		0x65, 0xa9, 0x29, 0x22, 0xba, 0x1a, 0x51, 0x6d, 0x08, 0x0d, 0x5a, 0x83, 0x59, 0x8a, 0xe8, 0xf4,
		0x2c, 0xdf, 0xec, 0x5a, 0x58, 0x23, 0x2f, 0x0f, 0x1e, 0x4d, 0xc4, 0xc1, 0xcc, 0x66, 0x88, 0xc5,
		0x2e, 0x37, 0x20, 0x33, 0xf2, 0xd0, 0x16, 0x3c, 0x4a, 0x61, 0x6d, 0x6c, 0x63, 0x57, 0xf7, 0xb1,
		0x86, 0x7f, 0xae, 0xa7, 0x5b, 0x9e, 0xa6, 0xdb, 0x4d, 0xed, 0x48, 0xf7, 0x8e, 0x94, 0xb9, 0x28,
		0xc1, 0x45, 0x62, 0xbb, 0xc5, 0x4d, 0xab, 0xd4, 0xb2, 0x62, 0x37, 0x6f, 0xeb, 0xde, 0x11, 0x2a,
		0xc3, 0x05, 0x4a, 0xe4, 0xf9, 0xae, 0x69, 0xb7, 0x35, 0xe3, 0x08, 0x1b, 0x77, 0xb5, 0x9e, 0xdf,
		0xba, 0xa1, 0x3c, 0x12, 0x65, 0xa0, 0x93, 0xac, 0x53, 0x9b, 0x0d, 0x62, 0x72, 0xe8, 0xb7, 0x6e,
		0xa0, 0x3a, 0x14, 0xc8, 0x7e, 0x74, 0xcc, 0xd7, 0xb0, 0xd6, 0x72, 0x5c, 0x5a, 0x5c, 0x8a, 0x23,
		0x0e, 0x77, 0xc4, 0x89, 0xcb, 0x35, 0x0e, 0xd8, 0x75, 0x9a, 0xb8, 0x9c, 0xae, 0xef, 0x57, 0xab,
		0x9b, 0x6a, 0x5e, 0xb0, 0xbc, 0xe0, 0xb8, 0x24, 0xa6, 0xda, 0x4e, 0xe0, 0xe3, 0x3c, 0x8b, 0xa9,
		0xb6, 0x23, 0x3c, 0xbc, 0x06, 0xb3, 0x86, 0xc1, 0x96, 0x6d, 0x1a, 0x1a, 0xef, 0xf2, 0x3d, 0x45,
		0xee, 0xf3, 0x97, 0x61, 0x6c, 0x31, 0x03, 0x1e, 0xe6, 0x1e, 0xba, 0x09, 0x0f, 0x85, 0xfe, 0x8a,
		0x02, 0x67, 0x86, 0x56, 0x39, 0x08, 0x5d, 0x83, 0xd9, 0xee, 0xf1, 0x30, 0x10, 0xf5, 0x3d, 0xb1,
		0x7b, 0x3c, 0x08, 0x7b, 0x9c, 0xbe, 0xb9, 0xb9, 0xd8, 0xd0, 0x7d, 0xdc, 0x54, 0x1e, 0x8e, 0x5a,
		0x47, 0x14, 0xe8, 0x0a, 0xc8, 0x86, 0xa1, 0x61, 0x5b, 0x6f, 0x58, 0x58, 0xd3, 0x5d, 0x6c, 0xeb,
		0x9e, 0x72, 0x29, 0x6a, 0x5c, 0x34, 0x8c, 0x2a, 0xd5, 0x56, 0xa8, 0x12, 0x3d, 0x05, 0x33, 0x4e,
		0xe3, 0x8e, 0xc1, 0x82, 0x4b, 0xeb, 0xba, 0xb8, 0x65, 0xbe, 0xaa, 0x3c, 0x46, 0xdd, 0x34, 0x4d,
		0x14, 0x34, 0xb4, 0xf6, 0xa9, 0x18, 0x3d, 0x09, 0xb2, 0xe1, 0x1d, 0xe9, 0x6e, 0x97, 0x56, 0x77,
		0xaf, 0xab, 0x1b, 0x58, 0x79, 0x9c, 0x99, 0x32, 0xf9, 0x9e, 0x10, 0xa3, 0x97, 0x60, 0xae, 0x67,
		0x9b, 0xb6, 0x8f, 0xdd, 0xae, 0x8b, 0x49, 0x93, 0xce, 0x4e, 0x9a, 0xf2, 0xcf, 0x93, 0xa7, 0xb4,
		0xd9, 0x87, 0x51, 0x6b, 0xb6, 0xbb, 0xea, 0x6c, 0x6f, 0x58, 0xb8, 0x58, 0x86, 0x42, 0x74, 0xd3,
		0x51, 0x0e, 0xd8, 0xb6, 0xcb, 0x12, 0xa9, 0xa1, 0x1b, 0xb5, 0x4d, 0x52, 0xfd, 0x3e, 0x53, 0x95,
		0x13, 0xa4, 0x0a, 0xef, 0x6c, 0x1f, 0x54, 0x35, 0xf5, 0x70, 0xef, 0x60, 0x7b, 0xb7, 0x2a, 0x27,
		0x9f, 0xca, 0x65, 0xdf, 0x9b, 0x94, 0xef, 0xdf, 0xbf, 0x7f, 0x3f, 0xb1, 0xf8, 0xed, 0x04, 0x14,
		0xfb, 0x3b, 0x5f, 0xf4, 0x33, 0xf0, 0xb0, 0x78, 0x4d, 0xf5, 0xb0, 0xaf, 0xbd, 0x62, 0xba, 0x34,
		0x0e, 0x3b, 0x3a, 0xeb, 0x1d, 0x03, 0x17, 0xce, 0x71, 0xab, 0x3a, 0xf6, 0x3f, 0x6d, 0xba, 0x24,
		0xca, 0x3a, 0xba, 0x8f, 0x76, 0xe0, 0x92, 0xed, 0x68, 0x9e, 0xaf, 0xdb, 0x4d, 0xdd, 0x6d, 0x6a,
		0xe1, 0x05, 0x81, 0xa6, 0x1b, 0x06, 0xf6, 0x3c, 0x87, 0x95, 0x80, 0x80, 0xe5, 0x63, 0xb6, 0x53,
		0xe7, 0xc6, 0x61, 0x6e, 0xac, 0x70, 0xd3, 0x81, 0xed, 0x4e, 0x9e, 0xb6, 0xdd, 0x8f, 0x40, 0xae,
		0xa3, 0x77, 0x35, 0x6c, 0xfb, 0xee, 0x31, 0xed, 0xd7, 0xb2, 0x6a, 0xb6, 0xa3, 0x77, 0xab, 0x64,
		0xfc, 0xe3, 0xdb, 0x83, 0xa8, 0x1f, 0xbf, 0x97, 0x84, 0x42, 0xb4, 0x67, 0x23, 0x2d, 0xb0, 0x41,
		0xf3, 0xb3, 0x44, 0x8f, 0xef, 0xc7, 0xcf, 0xec, 0xf0, 0x96, 0x37, 0x48, 0xe2, 0x2e, 0x67, 0x58,
		0x27, 0xa5, 0x32, 0x24, 0x29, 0x9a, 0xe4, 0xc0, 0x62, 0xd6, 0x9f, 0x67, 0x55, 0x3e, 0x42, 0x5b,
		0x90, 0xb9, 0xe3, 0x51, 0xee, 0x0c, 0xe5, 0x7e, 0xec, 0x6c, 0xee, 0x17, 0xeb, 0x94, 0x3c, 0xf7,
		0x62, 0x5d, 0xdb, 0xab, 0xa9, 0xbb, 0x95, 0x1d, 0x95, 0xc3, 0xd1, 0x45, 0x48, 0x59, 0xfa, 0x6b,
		0xc7, 0xfd, 0x29, 0x9e, 0x8a, 0xc6, 0x75, 0xfc, 0x45, 0x48, 0xbd, 0x82, 0xf5, 0xbb, 0xfd, 0x89,
		0x95, 0x8a, 0x7e, 0x8c, 0xa1, 0x7f, 0x05, 0xd2, 0xd4, 0x5f, 0x08, 0x80, 0x7b, 0x4c, 0x9e, 0x40,
		0x59, 0x48, 0x6d, 0xd4, 0x54, 0x12, 0xfe, 0x32, 0x14, 0x98, 0x54, 0xdb, 0xdf, 0xae, 0x6e, 0x54,
		0xe5, 0xc4, 0xe2, 0x1a, 0x64, 0x98, 0x13, 0xc8, 0xd1, 0x08, 0xdc, 0x20, 0x4f, 0xf0, 0x21, 0xe7,
		0x90, 0x84, 0xf6, 0x70, 0x77, 0xbd, 0xaa, 0xca, 0x89, 0xe8, 0xf6, 0x7a, 0x50, 0x88, 0xb6, 0x6b,
		0x3f, 0x99, 0x98, 0xfa, 0x1b, 0x09, 0xf2, 0x91, 0xf6, 0x8b, 0x14, 0x7e, 0xdd, 0xb2, 0x9c, 0x57,
		0x34, 0xdd, 0x32, 0x75, 0x8f, 0x07, 0x05, 0x50, 0x51, 0x85, 0x48, 0xc6, 0xdd, 0xb4, 0x9f, 0xc8,
		0xe4, 0xbf, 0x22, 0x81, 0x3c, 0xd8, 0xba, 0x0d, 0x4c, 0x50, 0xfa, 0x48, 0x27, 0xf8, 0x96, 0x04,
		0xc5, 0xfe, 0x7e, 0x6d, 0x60, 0x7a, 0x97, 0x3f, 0xd2, 0xe9, 0x7d, 0x49, 0x82, 0xa9, 0xbe, 0x2e,
		0xed, 0xff, 0xd5, 0xec, 0xde, 0x4c, 0xc2, 0xec, 0x08, 0x1c, 0xaa, 0xf0, 0x76, 0x96, 0x75, 0xd8,
		0xcf, 0x8c, 0xf3, 0xac, 0x65, 0x52, 0x2d, 0xf7, 0x75, 0xd7, 0xe7, 0xdd, 0xef, 0x93, 0x20, 0x9b,
		0x4d, 0x6c, 0xfb, 0x66, 0xcb, 0xc4, 0x2e, 0x7f, 0x05, 0x67, 0x3d, 0xee, 0x74, 0x28, 0x67, 0x6f,
		0xe1, 0x3f, 0x0d, 0xa8, 0xeb, 0x78, 0xa6, 0x6f, 0xde, 0xc3, 0x9a, 0x69, 0x8b, 0xf7, 0x75, 0xd2,
		0xf3, 0xa6, 0x54, 0x59, 0x68, 0xb6, 0x6d, 0x3f, 0xb0, 0xb6, 0x71, 0x5b, 0x1f, 0xb0, 0x26, 0xb9,
		0x2f, 0xa9, 0xca, 0x42, 0x13, 0x58, 0x5f, 0x86, 0x42, 0xd3, 0xe9, 0x91, 0xf6, 0x81, 0xd9, 0x91,
		0x54, 0x2b, 0xa9, 0x79, 0x26, 0x0b, 0x4c, 0x78, 0x7f, 0x17, 0x5e, 0x14, 0x14, 0xd4, 0x3c, 0x93,
		0x31, 0x93, 0x27, 0x60, 0x5a, 0x6f, 0xb7, 0x5d, 0x42, 0x2e, 0x88, 0x58, 0xd3, 0x5a, 0x0c, 0xc4,
		0xd4, 0x70, 0xfe, 0x45, 0xc8, 0x0a, 0x3f, 0x90, 0x6a, 0x46, 0x3c, 0xa1, 0x75, 0xd9, 0x75, 0x4d,
		0x62, 0x29, 0xa7, 0x66, 0x6d, 0xa1, 0xbc, 0x0c, 0x05, 0xd3, 0xd3, 0xc2, 0x7b, 0xc3, 0xc4, 0x42,
		0x62, 0x29, 0xab, 0xe6, 0x4d, 0x2f, 0xb8, 0x28, 0x5a, 0x7c, 0x3b, 0x01, 0xc5, 0xfe, 0x7b, 0x4f,
		0xb4, 0x09, 0x59, 0xcb, 0x31, 0x74, 0x1a, 0x08, 0xec, 0xd2, 0x7d, 0x29, 0xe6, 0xaa, 0x74, 0x79,
		0x87, 0xdb, 0xab, 0x01, 0x72, 0xfe, 0x1f, 0x24, 0xc8, 0x0a, 0x31, 0xba, 0x00, 0xa9, 0xae, 0xee,
		0x1f, 0x51, 0xba, 0xf4, 0x7a, 0x42, 0x96, 0x54, 0x3a, 0x26, 0x72, 0xaf, 0xab, 0xdb, 0x34, 0x04,
		0xb8, 0x9c, 0x8c, 0xc9, 0xbe, 0x5a, 0x58, 0x6f, 0xd2, 0x76, 0xd8, 0xe9, 0x74, 0xb0, 0xed, 0x7b,
		0x62, 0x5f, 0xb9, 0x7c, 0x83, 0x8b, 0xd1, 0xd3, 0x30, 0xe3, 0xbb, 0xba, 0x69, 0xf5, 0xd9, 0xa6,
		0xa8, 0xad, 0x2c, 0x14, 0x81, 0x71, 0x19, 0x2e, 0x0a, 0xde, 0x26, 0xf6, 0x75, 0xe3, 0x08, 0x37,
		0x43, 0x50, 0x86, 0x5e, 0xaa, 0x3d, 0xcc, 0x0d, 0x36, 0xb9, 0x5e, 0x60, 0x17, 0xbf, 0x2b, 0xc1,
		0x8c, 0x68, 0xe0, 0x9b, 0x81, 0xb3, 0x76, 0x01, 0x74, 0xdb, 0x76, 0xfc, 0xa8, 0xbb, 0x86, 0x43,
		0x79, 0x08, 0xb7, 0x5c, 0x09, 0x40, 0x6a, 0x84, 0x60, 0xbe, 0x03, 0x10, 0x6a, 0x4e, 0x75, 0xdb,
		0x25, 0xc8, 0xf3, 0x4b, 0x6d, 0xfa, 0x65, 0x84, 0xbd, 0xf5, 0x01, 0x13, 0x91, 0x4e, 0x1f, 0xcd,
		0x41, 0xba, 0x81, 0xdb, 0xa6, 0xcd, 0xaf, 0xda, 0xd8, 0x40, 0x5c, 0xe0, 0xa5, 0x82, 0x0b, 0xbc,
		0xf5, 0xcf, 0xc2, 0xac, 0xe1, 0x74, 0x06, 0xa7, 0xbb, 0x2e, 0x0f, 0xbc, 0x79, 0x7a, 0xb7, 0xa5,
		0xcf, 0x40, 0xd8, 0x9d, 0x7d, 0x55, 0x92, 0xbe, 0x96, 0x48, 0x6e, 0xed, 0xaf, 0x7f, 0x23, 0x31,
		0xbf, 0xc5, 0xa0, 0xfb, 0x62, 0xa5, 0x2a, 0x6e, 0x59, 0xd8, 0x20, 0xb3, 0x87, 0xf7, 0x1e, 0x83,
		0x67, 0xda, 0xa6, 0x7f, 0xd4, 0x6b, 0x2c, 0x1b, 0x4e, 0xe7, 0x4a, 0xdb, 0x69, 0x3b, 0xe1, 0xc7,
		0x20, 0x32, 0xa2, 0x03, 0xfa, 0x1f, 0xff, 0x20, 0x94, 0x0b, 0xa4, 0xf3, 0xb1, 0x5f, 0x8f, 0xca,
		0x7b, 0x30, 0xcb, 0x8d, 0x35, 0x7a, 0x23, 0xcd, 0xfa, 0x70, 0x74, 0xe6, 0xad, 0x84, 0xf2, 0xad,
		0x77, 0x69, 0xa5, 0x53, 0x67, 0x38, 0x94, 0xe8, 0x58, 0xa7, 0x5e, 0x56, 0xe1, 0xa1, 0x3e, 0x3e,
		0x76, 0x34, 0xb1, 0x1b, 0xc3, 0xf8, 0x6d, 0xce, 0x38, 0x1b, 0x61, 0xac, 0x73, 0x68, 0x79, 0x03,
		0xa6, 0xce, 0xc3, 0xf5, 0x77, 0x9c, 0xab, 0x80, 0xa3, 0x24, 0x5b, 0x30, 0x4d, 0x49, 0x8c, 0x9e,
		0xe7, 0x3b, 0x1d, 0x9a, 0xf7, 0xce, 0xa6, 0xf9, 0xfb, 0x77, 0xd9, 0x59, 0x29, 0x12, 0xd8, 0x46,
		0x80, 0x1a, 0x20, 0xa2, 0x5d, 0xdd, 0xd9, 0x44, 0xef, 0x0c, 0x13, 0x11, 0x54, 0xf9, 0x53, 0x30,
		0x47, 0x24, 0x34, 0x47, 0x45, 0xa7, 0x15, 0x7f, 0x21, 0xa3, 0x7c, 0xf7, 0x75, 0x76, 0x36, 0x67,
		0x03, 0x82, 0xc8, 0x04, 0x23, 0x5b, 0xda, 0xc6, 0xbe, 0x8f, 0x5d, 0x4f, 0xd3, 0x2d, 0x0b, 0x9d,
		0xf9, 0xa9, 0x47, 0xf9, 0xe2, 0x0f, 0xfa, 0xb7, 0x74, 0x8b, 0x21, 0x2b, 0x96, 0x55, 0x3e, 0x84,
		0x87, 0x47, 0x84, 0xc8, 0x18, 0x9c, 0x6f, 0x72, 0xce, 0xb9, 0xa1, 0x30, 0x21, 0xb4, 0xfb, 0x20,
		0xe4, 0xc1, 0xc6, 0x8e, 0xc1, 0xf9, 0x25, 0xce, 0x89, 0x38, 0x56, 0xec, 0x2f, 0x61, 0x7c, 0x11,
		0x66, 0xee, 0x61, 0xb7, 0xe1, 0x78, 0xfc, 0x16, 0x61, 0x0c, 0xba, 0xb7, 0x38, 0xdd, 0x34, 0x07,
		0xd2, 0x3b, 0x05, 0xc2, 0x75, 0x13, 0xb2, 0x2d, 0xdd, 0xc0, 0x63, 0x50, 0x7c, 0x99, 0x53, 0x4c,
		0x12, 0x7b, 0x02, 0xad, 0x40, 0xa1, 0xed, 0xf0, 0x32, 0x15, 0x0f, 0xff, 0x0a, 0x87, 0xe7, 0x05,
		0x86, 0x53, 0x74, 0x9d, 0x6e, 0xcf, 0x22, 0x35, 0x2c, 0x9e, 0xe2, 0x77, 0x04, 0x85, 0xc0, 0x70,
		0x8a, 0x73, 0xb8, 0xf5, 0xab, 0x82, 0xc2, 0x8b, 0xf8, 0xf3, 0x79, 0xc8, 0x3b, 0xb6, 0x75, 0xec,
		0xd8, 0xe3, 0x4c, 0xe2, 0x77, 0x39, 0x03, 0x70, 0x08, 0x21, 0xb8, 0x05, 0xb9, 0x71, 0x37, 0xe2,
		0xf7, 0x38, 0x3c, 0x8b, 0xc5, 0x0e, 0x6c, 0xc1, 0xb4, 0xc8, 0x56, 0xa6, 0x63, 0x8f, 0x41, 0xf1,
		0xfb, 0x9c, 0xa2, 0x18, 0x81, 0xf1, 0x65, 0xf8, 0xd8, 0xf3, 0xdb, 0x78, 0x1c, 0x92, 0xb7, 0xc5,
		0x32, 0x38, 0x84, 0xbb, 0xb2, 0x81, 0x6d, 0xe3, 0x68, 0x3c, 0x86, 0xaf, 0x0b, 0x57, 0x0a, 0x0c,
		0xa1, 0xd8, 0x80, 0xa9, 0x8e, 0xee, 0x7a, 0x47, 0xba, 0x35, 0xd6, 0x76, 0xfc, 0x01, 0xe7, 0x28,
		0x04, 0x20, 0xee, 0x91, 0x9e, 0x7d, 0x1e, 0x9a, 0x6f, 0x08, 0x8f, 0x44, 0x60, 0xfc, 0xe8, 0x79,
		0x3e, 0xbd, 0xa8, 0x39, 0x0f, 0xdb, 0x1f, 0x8a, 0xa3, 0xc7, 0xb0, 0xbb, 0x51, 0xc6, 0x5b, 0x90,
		0xf3, 0xcc, 0xd7, 0xc6, 0xa2, 0xf9, 0x23, 0xb1, 0xd3, 0x14, 0x40, 0xc0, 0x2f, 0xc3, 0xc5, 0x91,
		0x35, 0x63, 0x0c, 0xb2, 0x3f, 0xe6, 0x64, 0x17, 0x46, 0xd4, 0x0d, 0x9e, 0x12, 0xce, 0x4b, 0xf9,
		0x27, 0x22, 0x25, 0xe0, 0x01, 0xae, 0x7d, 0xd2, 0xe6, 0x7b, 0x7a, 0xeb, 0x7c, 0x5e, 0xfb, 0x53,
		0xe1, 0x35, 0x86, 0xed, 0xf3, 0xda, 0x01, 0x5c, 0xe0, 0x8c, 0xe7, 0xdb, 0xd7, 0x6f, 0x8a, 0xc4,
		0xca, 0xd0, 0x87, 0xfd, 0xbb, 0xfb, 0x59, 0x98, 0x0f, 0xdc, 0x29, 0x3a, 0x54, 0x4f, 0xeb, 0xe8,
		0xdd, 0x31, 0x98, 0xbf, 0xc5, 0x99, 0x45, 0xc6, 0x0f, 0x5a, 0x5c, 0x6f, 0x57, 0xef, 0x12, 0xf2,
		0x97, 0x40, 0x11, 0xe4, 0x3d, 0xdb, 0xc5, 0x86, 0xd3, 0xb6, 0xcd, 0xd7, 0x70, 0x73, 0x0c, 0xea,
		0x3f, 0x1b, 0xd8, 0xaa, 0xc3, 0x08, 0x9c, 0x30, 0x6f, 0x83, 0x1c, 0x34, 0x2e, 0x9a, 0xd9, 0xe9,
		0x3a, 0xae, 0x1f, 0xc3, 0xf8, 0xe7, 0x62, 0xa7, 0x02, 0xdc, 0x36, 0x85, 0x95, 0xab, 0x50, 0xa4,
		0xc3, 0x71, 0x43, 0xf2, 0x2f, 0x38, 0xd1, 0x54, 0x88, 0xe2, 0x89, 0xc3, 0x70, 0x3a, 0x5d, 0xdd,
		0x1d, 0x27, 0xff, 0xfd, 0xa5, 0x48, 0x1c, 0x1c, 0xc2, 0xa2, 0x6f, 0x7a, 0xa0, 0x12, 0xa3, 0xb8,
		0xaf, 0xe0, 0xca, 0xe7, 0x3e, 0xe0, 0x67, 0xb6, 0xbf, 0x10, 0x97, 0x77, 0x88, 0x7b, 0xfa, 0xcb,
		0x65, 0x3c, 0xd9, 0xeb, 0x1f, 0x04, 0x1e, 0xea, 0xab, 0x96, 0xe5, 0x17, 0x60, 0xaa, 0xaf, 0x54,
		0xc6, 0x53, 0xfd, 0x3c, 0xa7, 0x2a, 0x44, 0x2b, 0x65, 0x79, 0x0d, 0x52, 0xa4, 0xec, 0xc5, 0xc3,
		0x7f, 0x81, 0xc3, 0xa9, 0x79, 0xf9, 0x13, 0x90, 0x15, 0xe5, 0x2e, 0x1e, 0xfa, 0x8b, 0x1c, 0x1a,
		0x40, 0x08, 0x5c, 0x94, 0xba, 0x78, 0xf8, 0x2f, 0x09, 0xb8, 0x80, 0x10, 0xf8, 0xf8, 0x2e, 0xfc,
		0xdb, 0x2f, 0xa4, 0x78, 0xba, 0x12, 0xbe, 0xbb, 0x05, 0x93, 0xbc, 0xc6, 0xc5, 0xa3, 0x3f, 0xcf,
		0x1f, 0x2e, 0x10, 0xe5, 0xeb, 0x90, 0x1e, 0xd3, 0xe1, 0xbf, 0xcc, 0xa1, 0xcc, 0xbe, 0xbc, 0x01,
		0xf9, 0x48, 0x5d, 0x8b, 0x87, 0xff, 0x0a, 0x87, 0x47, 0x51, 0x64, 0xea, 0xbc, 0xae, 0xc5, 0x13,
		0xfc, 0xaa, 0x98, 0x3a, 0x47, 0x10, 0xb7, 0x89, 0x92, 0x16, 0x8f, 0xfe, 0x35, 0xe1, 0x75, 0x01,
		0x29, 0x3f, 0x0f, 0xb9, 0x20, 0x4d, 0xc5, 0xe3, 0x7f, 0x9d, 0xe3, 0x43, 0x0c, 0xf1, 0x40, 0x24,
		0x4d, 0xc6, 0x53, 0xfc, 0x86, 0xf0, 0x40, 0x04, 0x45, 0x8e, 0xd1, 0x60, 0xe9, 0x8b, 0x67, 0xfa,
		0x4d, 0x71, 0x8c, 0x06, 0x2a, 0x1f, 0xd9, 0x4d, 0x9a, 0x2d, 0xe2, 0x29, 0x7e, 0x4b, 0xec, 0x26,
		0xb5, 0x27, 0xd3, 0x18, 0xac, 0x25, 0xf1, 0x1c, 0xbf, 0x2d, 0xa6, 0x31, 0x50, 0x4a, 0xca, 0xfb,
		0x80, 0x86, 0xeb, 0x48, 0x3c, 0xdf, 0x1b, 0x9c, 0x6f, 0x66, 0xa8, 0x8c, 0x94, 0x3f, 0x0d, 0x17,
		0x46, 0xd7, 0x90, 0x78, 0xd6, 0x2f, 0x7e, 0x30, 0xd0, 0xf5, 0x47, 0x4b, 0x48, 0xf9, 0x20, 0xec,
		0xfa, 0xa3, 0xf5, 0x23, 0x9e, 0xf6, 0xcd, 0x0f, 0xfa, 0xdf, 0x10, 0xa3, 0xe5, 0xa3, 0x5c, 0x01,
		0x08, 0x53, 0x77, 0x3c, 0xd7, 0x5b, 0x9c, 0x2b, 0x02, 0x22, 0x47, 0x83, 0x67, 0xee, 0x78, 0xfc,
		0x97, 0xc5, 0xd1, 0xe0, 0x88, 0xf2, 0x2d, 0xc8, 0xda, 0x3d, 0xcb, 0x22, 0xc1, 0x81, 0xce, 0xfe,
		0x65, 0x89, 0xf2, 0x2f, 0x1f, 0xf2, 0x83, 0x21, 0x00, 0xe5, 0x35, 0x48, 0xe3, 0x4e, 0x03, 0x37,
		0xe3, 0x90, 0xff, 0xfa, 0xa1, 0x48, 0x08, 0xc4, 0xba, 0xfc, 0x3c, 0x40, 0xe4, 0x15, 0x34, 0x06,
		0xfb, 0x6f, 0x1f, 0xf2, 0x8f, 0xd6, 0x21, 0x24, 0x24, 0x60, 0x9f, 0xc0, 0xcf, 0x26, 0xf8, 0x41,
		0x3f, 0x01, 0x7d, 0xd1, 0xbc, 0x09, 0x93, 0x77, 0x3c, 0xc7, 0xf6, 0xf5, 0x76, 0x1c, 0xfa, 0xdf,
		0x39, 0x5a, 0xd8, 0x13, 0x87, 0x75, 0x1c, 0x17, 0xfb, 0x7a, 0xdb, 0x8b, 0xc3, 0xfe, 0x07, 0xc7,
		0x06, 0x00, 0x02, 0x36, 0x74, 0xcf, 0x1f, 0x67, 0xdd, 0xff, 0x29, 0xc0, 0x02, 0x40, 0x26, 0x4d,
		0xfe, 0xbf, 0x8b, 0x8f, 0xe3, 0xb0, 0xef, 0x8b, 0x49, 0x73, 0xfb, 0xf2, 0x27, 0x20, 0x47, 0xfe,
		0x65, 0x3f, 0xe4, 0x88, 0x01, 0xff, 0x17, 0x07, 0x87, 0x08, 0xf2, 0x64, 0xcf, 0x6f, 0xfa, 0x66,
		0xbc, 0xb3, 0xff, 0x9b, 0xef, 0xb4, 0xb0, 0x2f, 0x57, 0x20, 0xef, 0xf9, 0xcd, 0x66, 0xcf, 0x65,
		0x37, 0x5a, 0x31, 0xf0, 0xff, 0xf9, 0x30, 0x78, 0x99, 0x0b, 0x30, 0xeb, 0x97, 0x47, 0x5f, 0x52,
		0xc1, 0x96, 0xb3, 0xe5, 0xb0, 0xeb, 0x29, 0x78, 0x23, 0x0d, 0xf3, 0x86, 0xd3, 0x69, 0x38, 0xde,
		0x95, 0x20, 0x13, 0x5c, 0x71, 0x6c, 0x6e, 0x8d, 0x92, 0x8e, 0x8d, 0xe7, 0xcf, 0x77, 0x17, 0xb5,
		0x78, 0x11, 0xd2, 0xf5, 0x5e, 0xa3, 0x71, 0x8c, 0x64, 0x48, 0x7a, 0xbd, 0x06, 0xff, 0xa9, 0x01,
		0xf9, 0x77, 0xf1, 0x7b, 0x49, 0xc8, 0xd7, 0xf5, 0x4e, 0xd7, 0xc2, 0x35, 0x1b, 0xd7, 0x5a, 0x48,
		0x81, 0x0c, 0x5d, 0xc5, 0x73, 0xd4, 0x48, 0xba, 0x3d, 0xa1, 0xf2, 0x71, 0xa0, 0x59, 0xa1, 0x77,
		0x74, 0x89, 0x40, 0xb3, 0x12, 0x68, 0xae, 0xb2, 0x2b, 0xba, 0x40, 0x73, 0x35, 0xd0, 0xac, 0xd2,
		0x8b, 0xba, 0x64, 0xa0, 0x59, 0x0d, 0x34, 0x6b, 0xf4, 0x22, 0x7a, 0x2a, 0xd0, 0xac, 0x05, 0x9a,
		0x6b, 0xf4, 0xea, 0x39, 0x15, 0x68, 0xae, 0x05, 0x9a, 0xeb, 0xf4, 0xc6, 0x79, 0x26, 0xd0, 0x5c,
		0x0f, 0x34, 0x37, 0xe8, 0x2d, 0x33, 0x0a, 0x34, 0x37, 0x02, 0xcd, 0x4d, 0xfa, 0x73, 0x82, 0xc9,
		0x40, 0x73, 0x13, 0xcd, 0xc3, 0x24, 0x5b, 0xd9, 0xb3, 0xf4, 0x2b, 0xde, 0xf4, 0xed, 0x09, 0x55,
		0x08, 0x42, 0xdd, 0x73, 0xf4, 0x27, 0x03, 0x99, 0x50, 0xf7, 0x5c, 0xa8, 0x5b, 0xa1, 0xbf, 0x9d,
		0x95, 0x43, 0xdd, 0x4a, 0xa8, 0xbb, 0xaa, 0x4c, 0x91, 0xcd, 0x0f, 0x75, 0x57, 0x43, 0xdd, 0xaa,
		0x52, 0x24, 0xfe, 0x0f, 0x75, 0xab, 0xa1, 0x6e, 0x4d, 0x99, 0x5e, 0x90, 0x96, 0x0a, 0xa1, 0x6e,
		0x0d, 0x3d, 0x03, 0x79, 0xaf, 0xd7, 0xd0, 0xf8, 0x47, 0x67, 0xfa, 0xd3, 0x84, 0xfc, 0x0a, 0x2c,
		0x93, 0x88, 0xa0, 0x9b, 0x7a, 0x7b, 0x42, 0x05, 0xaf, 0xd7, 0xe0, 0xc9, 0x71, 0xbd, 0x00, 0xf4,
		0xa5, 0x59, 0xa3, 0xbf, 0xc9, 0x5b, 0xdf, 0x7c, 0xe7, 0x41, 0x69, 0xe2, 0x3b, 0x0f, 0x4a, 0x13,
		0xff, 0xf8, 0xa0, 0x34, 0xf1, 0xfd, 0x07, 0x25, 0xe9, 0xfd, 0x07, 0x25, 0xe9, 0x87, 0x0f, 0x4a,
		0xd2, 0xfd, 0x93, 0x92, 0xf4, 0xf5, 0x93, 0x92, 0xf4, 0xcd, 0x93, 0x92, 0xf4, 0xd7, 0x27, 0x25,
		0xe9, 0x9d, 0x93, 0x92, 0xf4, 0x9d, 0x93, 0xd2, 0xc4, 0xf7, 0x4f, 0x4a, 0xd2, 0x7b, 0x27, 0xa5,
		0x89, 0xf7, 0x4f, 0x4a, 0xd2, 0x0f, 0x4f, 0x4a, 0x13, 0xf7, 0xff, 0xa9, 0x34, 0xd1, 0xc8, 0xd0,
		0x30, 0xba, 0xfa, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x44, 0xa1, 0xc3, 0xf5, 0x0a, 0x2f, 0x00,
		0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}

// It is alive!
func (this *Subby) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Subby)
	if !ok {
		that2, ok := that.(Subby)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Subby")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Subby but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Subby but is not nil && this == nil")
	}
	if this.Sub != that1.Sub {
		return fmt.Errorf("Sub this(%v) Not Equal that(%v)", this.Sub, that1.Sub)
	}
	return nil
}
func (this *Subby) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Subby)
	if !ok {
		that2, ok := that.(Subby)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Sub != that1.Sub {
		return false
	}
	return true
}
func (this *SampleOneOf) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf)
	if !ok {
		that2, ok := that.(SampleOneOf)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf but is not nil && this == nil")
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return fmt.Errorf("this.TestOneof != nil && that1.TestOneof == nil")
		}
	} else if this.TestOneof == nil {
		return fmt.Errorf("this.TestOneof == nil && that1.TestOneof != nil")
	} else if err := this.TestOneof.VerboseEqual(that1.TestOneof); err != nil {
		return err
	}
	return nil
}
func (this *SampleOneOf_Field1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field1)
	if !ok {
		that2, ok := that.(SampleOneOf_Field1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field1 but is not nil && this == nil")
	}
	if this.Field1 != that1.Field1 {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	return nil
}
func (this *SampleOneOf_Field2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field2)
	if !ok {
		that2, ok := that.(SampleOneOf_Field2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field2 but is not nil && this == nil")
	}
	if this.Field2 != that1.Field2 {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	return nil
}
func (this *SampleOneOf_Field3) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field3)
	if !ok {
		that2, ok := that.(SampleOneOf_Field3)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field3")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field3 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field3 but is not nil && this == nil")
	}
	if this.Field3 != that1.Field3 {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", this.Field3, that1.Field3)
	}
	return nil
}
func (this *SampleOneOf_Field4) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field4)
	if !ok {
		that2, ok := that.(SampleOneOf_Field4)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field4")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field4 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field4 but is not nil && this == nil")
	}
	if this.Field4 != that1.Field4 {
		return fmt.Errorf("Field4 this(%v) Not Equal that(%v)", this.Field4, that1.Field4)
	}
	return nil
}
func (this *SampleOneOf_Field5) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field5)
	if !ok {
		that2, ok := that.(SampleOneOf_Field5)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field5")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field5 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field5 but is not nil && this == nil")
	}
	if this.Field5 != that1.Field5 {
		return fmt.Errorf("Field5 this(%v) Not Equal that(%v)", this.Field5, that1.Field5)
	}
	return nil
}
func (this *SampleOneOf_Field6) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field6)
	if !ok {
		that2, ok := that.(SampleOneOf_Field6)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field6")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field6 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field6 but is not nil && this == nil")
	}
	if this.Field6 != that1.Field6 {
		return fmt.Errorf("Field6 this(%v) Not Equal that(%v)", this.Field6, that1.Field6)
	}
	return nil
}
func (this *SampleOneOf_Field7) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field7)
	if !ok {
		that2, ok := that.(SampleOneOf_Field7)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field7")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field7 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field7 but is not nil && this == nil")
	}
	if this.Field7 != that1.Field7 {
		return fmt.Errorf("Field7 this(%v) Not Equal that(%v)", this.Field7, that1.Field7)
	}
	return nil
}
func (this *SampleOneOf_Field8) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field8)
	if !ok {
		that2, ok := that.(SampleOneOf_Field8)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field8")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field8 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field8 but is not nil && this == nil")
	}
	if this.Field8 != that1.Field8 {
		return fmt.Errorf("Field8 this(%v) Not Equal that(%v)", this.Field8, that1.Field8)
	}
	return nil
}
func (this *SampleOneOf_Field9) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field9)
	if !ok {
		that2, ok := that.(SampleOneOf_Field9)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field9")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field9 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field9 but is not nil && this == nil")
	}
	if this.Field9 != that1.Field9 {
		return fmt.Errorf("Field9 this(%v) Not Equal that(%v)", this.Field9, that1.Field9)
	}
	return nil
}
func (this *SampleOneOf_Field10) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field10)
	if !ok {
		that2, ok := that.(SampleOneOf_Field10)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field10")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field10 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field10 but is not nil && this == nil")
	}
	if this.Field10 != that1.Field10 {
		return fmt.Errorf("Field10 this(%v) Not Equal that(%v)", this.Field10, that1.Field10)
	}
	return nil
}
func (this *SampleOneOf_Field11) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field11)
	if !ok {
		that2, ok := that.(SampleOneOf_Field11)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field11")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field11 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field11 but is not nil && this == nil")
	}
	if this.Field11 != that1.Field11 {
		return fmt.Errorf("Field11 this(%v) Not Equal that(%v)", this.Field11, that1.Field11)
	}
	return nil
}
func (this *SampleOneOf_Field12) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field12)
	if !ok {
		that2, ok := that.(SampleOneOf_Field12)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field12")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field12 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field12 but is not nil && this == nil")
	}
	if this.Field12 != that1.Field12 {
		return fmt.Errorf("Field12 this(%v) Not Equal that(%v)", this.Field12, that1.Field12)
	}
	return nil
}
func (this *SampleOneOf_Field13) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field13)
	if !ok {
		that2, ok := that.(SampleOneOf_Field13)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field13")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field13 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field13 but is not nil && this == nil")
	}
	if this.Field13 != that1.Field13 {
		return fmt.Errorf("Field13 this(%v) Not Equal that(%v)", this.Field13, that1.Field13)
	}
	return nil
}
func (this *SampleOneOf_Field14) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field14)
	if !ok {
		that2, ok := that.(SampleOneOf_Field14)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field14")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field14 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field14 but is not nil && this == nil")
	}
	if this.Field14 != that1.Field14 {
		return fmt.Errorf("Field14 this(%v) Not Equal that(%v)", this.Field14, that1.Field14)
	}
	return nil
}
func (this *SampleOneOf_Field15) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_Field15)
	if !ok {
		that2, ok := that.(SampleOneOf_Field15)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_Field15")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_Field15 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_Field15 but is not nil && this == nil")
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return fmt.Errorf("Field15 this(%v) Not Equal that(%v)", this.Field15, that1.Field15)
	}
	return nil
}
func (this *SampleOneOf_SubMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SampleOneOf_SubMessage)
	if !ok {
		that2, ok := that.(SampleOneOf_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SampleOneOf_SubMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SampleOneOf_SubMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SampleOneOf_SubMessage but is not nil && this == nil")
	}
	if !this.SubMessage.Equal(that1.SubMessage) {
		return fmt.Errorf("SubMessage this(%v) Not Equal that(%v)", this.SubMessage, that1.SubMessage)
	}
	return nil
}
func (this *SampleOneOf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf)
	if !ok {
		that2, ok := that.(SampleOneOf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.TestOneof == nil {
		if this.TestOneof != nil {
			return false
		}
	} else if this.TestOneof == nil {
		return false
	} else if !this.TestOneof.Equal(that1.TestOneof) {
		return false
	}
	return true
}
func (this *SampleOneOf_Field1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field1)
	if !ok {
		that2, ok := that.(SampleOneOf_Field1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field2)
	if !ok {
		that2, ok := that.(SampleOneOf_Field2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field3) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field3)
	if !ok {
		that2, ok := that.(SampleOneOf_Field3)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field4) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field4)
	if !ok {
		that2, ok := that.(SampleOneOf_Field4)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field4 != that1.Field4 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field5) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field5)
	if !ok {
		that2, ok := that.(SampleOneOf_Field5)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field5 != that1.Field5 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field6) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field6)
	if !ok {
		that2, ok := that.(SampleOneOf_Field6)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field6 != that1.Field6 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field7) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field7)
	if !ok {
		that2, ok := that.(SampleOneOf_Field7)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field7 != that1.Field7 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field8) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field8)
	if !ok {
		that2, ok := that.(SampleOneOf_Field8)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field8 != that1.Field8 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field9) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field9)
	if !ok {
		that2, ok := that.(SampleOneOf_Field9)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field9 != that1.Field9 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field10) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field10)
	if !ok {
		that2, ok := that.(SampleOneOf_Field10)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field10 != that1.Field10 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field11) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field11)
	if !ok {
		that2, ok := that.(SampleOneOf_Field11)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field11 != that1.Field11 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field12) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field12)
	if !ok {
		that2, ok := that.(SampleOneOf_Field12)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field12 != that1.Field12 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field13) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field13)
	if !ok {
		that2, ok := that.(SampleOneOf_Field13)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field13 != that1.Field13 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field14) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field14)
	if !ok {
		that2, ok := that.(SampleOneOf_Field14)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field14 != that1.Field14 {
		return false
	}
	return true
}
func (this *SampleOneOf_Field15) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_Field15)
	if !ok {
		that2, ok := that.(SampleOneOf_Field15)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return false
	}
	return true
}
func (this *SampleOneOf_SubMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SampleOneOf_SubMessage)
	if !ok {
		that2, ok := that.(SampleOneOf_SubMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SubMessage.Equal(that1.SubMessage) {
		return false
	}
	return true
}
func (this *Subby) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&one.Subby{")
	s = append(s, "Sub: "+fmt.Sprintf("%#v", this.Sub)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SampleOneOf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&one.SampleOneOf{")
	if this.TestOneof != nil {
		s = append(s, "TestOneof: "+fmt.Sprintf("%#v", this.TestOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SampleOneOf_Field1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field1{` +
		`Field1:` + fmt.Sprintf("%#v", this.Field1) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field2{` +
		`Field2:` + fmt.Sprintf("%#v", this.Field2) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field3) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field3{` +
		`Field3:` + fmt.Sprintf("%#v", this.Field3) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field4) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field4{` +
		`Field4:` + fmt.Sprintf("%#v", this.Field4) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field5) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field5{` +
		`Field5:` + fmt.Sprintf("%#v", this.Field5) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field6) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field6{` +
		`Field6:` + fmt.Sprintf("%#v", this.Field6) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field7) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field7{` +
		`Field7:` + fmt.Sprintf("%#v", this.Field7) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field8) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field8{` +
		`Field8:` + fmt.Sprintf("%#v", this.Field8) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field9) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field9{` +
		`Field9:` + fmt.Sprintf("%#v", this.Field9) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field10) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field10{` +
		`Field10:` + fmt.Sprintf("%#v", this.Field10) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field11) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field11{` +
		`Field11:` + fmt.Sprintf("%#v", this.Field11) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field12) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field12{` +
		`Field12:` + fmt.Sprintf("%#v", this.Field12) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field13) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field13{` +
		`Field13:` + fmt.Sprintf("%#v", this.Field13) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field14) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field14{` +
		`Field14:` + fmt.Sprintf("%#v", this.Field14) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_Field15) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_Field15{` +
		`Field15:` + fmt.Sprintf("%#v", this.Field15) + `}`}, ", ")
	return s
}
func (this *SampleOneOf_SubMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&one.SampleOneOf_SubMessage{` +
		`SubMessage:` + fmt.Sprintf("%#v", this.SubMessage) + `}`}, ", ")
	return s
}
func valueToGoStringOne(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringOne(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Subby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subby) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sub) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOne(dAtA, i, uint64(len(m.Sub)))
		i += copy(dAtA[i:], m.Sub)
	}
	return i, nil
}

func (m *SampleOneOf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampleOneOf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TestOneof != nil {
		nn1, err := m.TestOneof.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SampleOneOf_Field1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x9
	i++
	i = encodeFixed64One(dAtA, i, uint64(math.Float64bits(float64(m.Field1))))
	return i, nil
}
func (m *SampleOneOf_Field2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x15
	i++
	i = encodeFixed32One(dAtA, i, uint32(math.Float32bits(float32(m.Field2))))
	return i, nil
}
func (m *SampleOneOf_Field3) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintOne(dAtA, i, uint64(m.Field3))
	return i, nil
}
func (m *SampleOneOf_Field4) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintOne(dAtA, i, uint64(m.Field4))
	return i, nil
}
func (m *SampleOneOf_Field5) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	i = encodeVarintOne(dAtA, i, uint64(m.Field5))
	return i, nil
}
func (m *SampleOneOf_Field6) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	i = encodeVarintOne(dAtA, i, uint64(m.Field6))
	return i, nil
}
func (m *SampleOneOf_Field7) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	i = encodeVarintOne(dAtA, i, uint64((uint32(m.Field7)<<1)^uint32((m.Field7>>31))))
	return i, nil
}
func (m *SampleOneOf_Field8) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x40
	i++
	i = encodeVarintOne(dAtA, i, uint64((uint64(m.Field8)<<1)^uint64((m.Field8>>63))))
	return i, nil
}
func (m *SampleOneOf_Field9) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x4d
	i++
	i = encodeFixed32One(dAtA, i, uint32(m.Field9))
	return i, nil
}
func (m *SampleOneOf_Field10) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x55
	i++
	i = encodeFixed32One(dAtA, i, uint32(m.Field10))
	return i, nil
}
func (m *SampleOneOf_Field11) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x59
	i++
	i = encodeFixed64One(dAtA, i, uint64(m.Field11))
	return i, nil
}
func (m *SampleOneOf_Field12) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x61
	i++
	i = encodeFixed64One(dAtA, i, uint64(m.Field12))
	return i, nil
}
func (m *SampleOneOf_Field13) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x68
	i++
	if m.Field13 {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *SampleOneOf_Field14) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x72
	i++
	i = encodeVarintOne(dAtA, i, uint64(len(m.Field14)))
	i += copy(dAtA[i:], m.Field14)
	return i, nil
}
func (m *SampleOneOf_Field15) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Field15 != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintOne(dAtA, i, uint64(len(m.Field15)))
		i += copy(dAtA[i:], m.Field15)
	}
	return i, nil
}
func (m *SampleOneOf_SubMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SubMessage != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOne(dAtA, i, uint64(m.SubMessage.Size()))
		n2, err := m.SubMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func encodeFixed64One(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32One(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOne(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSubby(r randyOne, easy bool) *Subby {
	this := &Subby{}
	this.Sub = string(randStringOne(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSampleOneOf(r randyOne, easy bool) *SampleOneOf {
	this := &SampleOneOf{}
	oneofNumber_TestOneof := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}[r.Intn(16)]
	switch oneofNumber_TestOneof {
	case 1:
		this.TestOneof = NewPopulatedSampleOneOf_Field1(r, easy)
	case 2:
		this.TestOneof = NewPopulatedSampleOneOf_Field2(r, easy)
	case 3:
		this.TestOneof = NewPopulatedSampleOneOf_Field3(r, easy)
	case 4:
		this.TestOneof = NewPopulatedSampleOneOf_Field4(r, easy)
	case 5:
		this.TestOneof = NewPopulatedSampleOneOf_Field5(r, easy)
	case 6:
		this.TestOneof = NewPopulatedSampleOneOf_Field6(r, easy)
	case 7:
		this.TestOneof = NewPopulatedSampleOneOf_Field7(r, easy)
	case 8:
		this.TestOneof = NewPopulatedSampleOneOf_Field8(r, easy)
	case 9:
		this.TestOneof = NewPopulatedSampleOneOf_Field9(r, easy)
	case 10:
		this.TestOneof = NewPopulatedSampleOneOf_Field10(r, easy)
	case 11:
		this.TestOneof = NewPopulatedSampleOneOf_Field11(r, easy)
	case 12:
		this.TestOneof = NewPopulatedSampleOneOf_Field12(r, easy)
	case 13:
		this.TestOneof = NewPopulatedSampleOneOf_Field13(r, easy)
	case 14:
		this.TestOneof = NewPopulatedSampleOneOf_Field14(r, easy)
	case 15:
		this.TestOneof = NewPopulatedSampleOneOf_Field15(r, easy)
	case 16:
		this.TestOneof = NewPopulatedSampleOneOf_SubMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSampleOneOf_Field1(r randyOne, easy bool) *SampleOneOf_Field1 {
	this := &SampleOneOf_Field1{}
	this.Field1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Field1 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field2(r randyOne, easy bool) *SampleOneOf_Field2 {
	this := &SampleOneOf_Field2{}
	this.Field2 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Field2 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field3(r randyOne, easy bool) *SampleOneOf_Field3 {
	this := &SampleOneOf_Field3{}
	this.Field3 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field3 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field4(r randyOne, easy bool) *SampleOneOf_Field4 {
	this := &SampleOneOf_Field4{}
	this.Field4 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field4 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field5(r randyOne, easy bool) *SampleOneOf_Field5 {
	this := &SampleOneOf_Field5{}
	this.Field5 = uint32(r.Uint32())
	return this
}
func NewPopulatedSampleOneOf_Field6(r randyOne, easy bool) *SampleOneOf_Field6 {
	this := &SampleOneOf_Field6{}
	this.Field6 = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedSampleOneOf_Field7(r randyOne, easy bool) *SampleOneOf_Field7 {
	this := &SampleOneOf_Field7{}
	this.Field7 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field7 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field8(r randyOne, easy bool) *SampleOneOf_Field8 {
	this := &SampleOneOf_Field8{}
	this.Field8 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field8 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field9(r randyOne, easy bool) *SampleOneOf_Field9 {
	this := &SampleOneOf_Field9{}
	this.Field9 = uint32(r.Uint32())
	return this
}
func NewPopulatedSampleOneOf_Field10(r randyOne, easy bool) *SampleOneOf_Field10 {
	this := &SampleOneOf_Field10{}
	this.Field10 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Field10 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field11(r randyOne, easy bool) *SampleOneOf_Field11 {
	this := &SampleOneOf_Field11{}
	this.Field11 = uint64(uint64(r.Uint32()))
	return this
}
func NewPopulatedSampleOneOf_Field12(r randyOne, easy bool) *SampleOneOf_Field12 {
	this := &SampleOneOf_Field12{}
	this.Field12 = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Field12 *= -1
	}
	return this
}
func NewPopulatedSampleOneOf_Field13(r randyOne, easy bool) *SampleOneOf_Field13 {
	this := &SampleOneOf_Field13{}
	this.Field13 = bool(bool(r.Intn(2) == 0))
	return this
}
func NewPopulatedSampleOneOf_Field14(r randyOne, easy bool) *SampleOneOf_Field14 {
	this := &SampleOneOf_Field14{}
	this.Field14 = string(randStringOne(r))
	return this
}
func NewPopulatedSampleOneOf_Field15(r randyOne, easy bool) *SampleOneOf_Field15 {
	this := &SampleOneOf_Field15{}
	v1 := r.Intn(100)
	this.Field15 = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Field15[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedSampleOneOf_SubMessage(r randyOne, easy bool) *SampleOneOf_SubMessage {
	this := &SampleOneOf_SubMessage{}
	this.SubMessage = NewPopulatedSubby(r, easy)
	return this
}

type randyOne interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOne(r randyOne) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOne(r randyOne) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneOne(r)
	}
	return string(tmps)
}
func randUnrecognizedOne(r randyOne, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOne(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOne(dAtA []byte, r randyOne, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateOne(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOne(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOne(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOne(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Subby) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sub)
	if l > 0 {
		n += 1 + l + sovOne(uint64(l))
	}
	return n
}

func (m *SampleOneOf) Size() (n int) {
	var l int
	_ = l
	if m.TestOneof != nil {
		n += m.TestOneof.Size()
	}
	return n
}

func (m *SampleOneOf_Field1) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SampleOneOf_Field2) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *SampleOneOf_Field3) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field3))
	return n
}
func (m *SampleOneOf_Field4) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field4))
	return n
}
func (m *SampleOneOf_Field5) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field5))
	return n
}
func (m *SampleOneOf_Field6) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOne(uint64(m.Field6))
	return n
}
func (m *SampleOneOf_Field7) Size() (n int) {
	var l int
	_ = l
	n += 1 + sozOne(uint64(m.Field7))
	return n
}
func (m *SampleOneOf_Field8) Size() (n int) {
	var l int
	_ = l
	n += 1 + sozOne(uint64(m.Field8))
	return n
}
func (m *SampleOneOf_Field9) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *SampleOneOf_Field10) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *SampleOneOf_Field11) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SampleOneOf_Field12) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SampleOneOf_Field13) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *SampleOneOf_Field14) Size() (n int) {
	var l int
	_ = l
	l = len(m.Field14)
	n += 1 + l + sovOne(uint64(l))
	return n
}
func (m *SampleOneOf_Field15) Size() (n int) {
	var l int
	_ = l
	if m.Field15 != nil {
		l = len(m.Field15)
		n += 1 + l + sovOne(uint64(l))
	}
	return n
}
func (m *SampleOneOf_SubMessage) Size() (n int) {
	var l int
	_ = l
	if m.SubMessage != nil {
		l = m.SubMessage.Size()
		n += 2 + l + sovOne(uint64(l))
	}
	return n
}

func sovOne(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOne(x uint64) (n int) {
	return sovOne(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Subby) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subby{`,
		`Sub:` + fmt.Sprintf("%v", this.Sub) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf{`,
		`TestOneof:` + fmt.Sprintf("%v", this.TestOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field1{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field2{`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field3) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field3{`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field4) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field4{`,
		`Field4:` + fmt.Sprintf("%v", this.Field4) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field5) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field5{`,
		`Field5:` + fmt.Sprintf("%v", this.Field5) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field6) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field6{`,
		`Field6:` + fmt.Sprintf("%v", this.Field6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field7) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field7{`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field8) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field8{`,
		`Field8:` + fmt.Sprintf("%v", this.Field8) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field9) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field9{`,
		`Field9:` + fmt.Sprintf("%v", this.Field9) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field10) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field10{`,
		`Field10:` + fmt.Sprintf("%v", this.Field10) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field11) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field11{`,
		`Field11:` + fmt.Sprintf("%v", this.Field11) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field12) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field12{`,
		`Field12:` + fmt.Sprintf("%v", this.Field12) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field13) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field13{`,
		`Field13:` + fmt.Sprintf("%v", this.Field13) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field14) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field14{`,
		`Field14:` + fmt.Sprintf("%v", this.Field14) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_Field15) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_Field15{`,
		`Field15:` + fmt.Sprintf("%v", this.Field15) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SampleOneOf_SubMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SampleOneOf_SubMessage{`,
		`SubMessage:` + strings.Replace(fmt.Sprintf("%v", this.SubMessage), "Subby", "Subby", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOne(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func init() { proto.RegisterFile("combos/marshaler/one.proto", fileDescriptorOne) }

var fileDescriptorOne = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0xd2, 0xbf, 0x4f, 0x1b, 0x31,
	0x14, 0x07, 0x70, 0x3f, 0x8e, 0x24, 0xe0, 0x84, 0x92, 0xde, 0xf4, 0x9a, 0xe1, 0xc9, 0x62, 0xf2,
	0x42, 0xd2, 0xdc, 0x25, 0xfc, 0x58, 0x51, 0x55, 0x65, 0xa9, 0x90, 0xc2, 0x1f, 0x80, 0x62, 0xea,
	0x04, 0xa4, 0x5c, 0x8c, 0x72, 0x77, 0x43, 0x37, 0xfe, 0x9c, 0x8e, 0x1d, 0xfb, 0x27, 0x30, 0x32,
	0x76, 0xe8, 0xc0, 0xb9, 0x4b, 0x47, 0x46, 0xc6, 0x2a, 0x97, 0xf2, 0xbc, 0xbd, 0xaf, 0x3f, 0xf6,
	0x60, 0xfb, 0x2b, 0x7b, 0x37, 0x2e, 0x33, 0x2e, 0x1f, 0x64, 0xb3, 0x75, 0x7e, 0x3b, 0x5b, 0xda,
	0xf5, 0xc0, 0xad, 0x6c, 0xff, 0x7e, 0xed, 0x0a, 0x17, 0x47, 0x6e, 0x65, 0x7b, 0xc7, 0x8b, 0xbb,
	0xe2, 0xb6, 0x34, 0xfd, 0x1b, 0x97, 0x0d, 0x16, 0x6e, 0xe1, 0x06, 0xb5, 0x99, 0x72, 0x5e, 0xa7,
	0x3a, 0xd4, 0xd3, 0xf6, 0xcc, 0xd1, 0x07, 0xd9, 0xb8, 0x2a, 0x8d, 0xf9, 0x16, 0x77, 0x65, 0x94,
	0x97, 0x06, 0x41, 0x81, 0xde, 0x9f, 0x6e, 0xc6, 0xa3, 0xdf, 0x91, 0x6c, 0x5f, 0xcd, 0xb2, 0xfb,
	0xa5, 0xbd, 0x5c, 0xd9, 0xcb, 0x79, 0x8c, 0xb2, 0xf9, 0xf9, 0xce, 0x2e, 0xbf, 0x0e, 0xeb, 0x4d,
	0x30, 0x11, 0xd3, 0xff, 0x99, 0x25, 0xc1, 0x1d, 0x05, 0x7a, 0x87, 0x25, 0x61, 0x49, 0x31, 0x52,
	0xa0, 0x1b, 0x2c, 0x29, 0xcb, 0x08, 0x77, 0x15, 0xe8, 0x88, 0x65, 0xc4, 0x32, 0xc6, 0x86, 0x02,
	0x7d, 0xc0, 0x32, 0x66, 0x39, 0xc1, 0xa6, 0x02, 0xbd, 0xcb, 0x72, 0xc2, 0x72, 0x8a, 0x2d, 0x05,
	0xfa, 0x3d, 0xcb, 0x29, 0xcb, 0x19, 0xee, 0x29, 0xd0, 0x31, 0xcb, 0x19, 0xcb, 0x39, 0xee, 0x2b,
	0xd0, 0x2d, 0x96, 0xf3, 0xb8, 0x27, 0x5b, 0xdb, 0x9b, 0x7d, 0x44, 0xa9, 0x40, 0x1f, 0x4e, 0xc4,
	0xf4, 0x6d, 0x21, 0xd8, 0x10, 0xdb, 0x0a, 0x74, 0x33, 0xd8, 0x30, 0x58, 0x82, 0x1d, 0x05, 0xba,
	0x1b, 0x2c, 0x09, 0x96, 0xe2, 0x81, 0x02, 0xbd, 0x17, 0x2c, 0x0d, 0x36, 0xc2, 0x77, 0x9b, 0xf7,
	0x0f, 0x36, 0x0a, 0x36, 0xc6, 0x43, 0x05, 0xba, 0x13, 0x6c, 0x1c, 0x1f, 0xcb, 0x76, 0x5e, 0x9a,
	0xeb, 0xcc, 0xe6, 0xf9, 0x6c, 0x61, 0xb1, 0xab, 0x40, 0xb7, 0x13, 0xd9, 0xdf, 0x34, 0xa2, 0xfe,
	0xd4, 0x89, 0x98, 0xca, 0xbc, 0x34, 0x5f, 0xb6, 0x7e, 0xd1, 0x91, 0xb2, 0xb0, 0x79, 0x71, 0xed,
	0x56, 0xd6, 0xcd, 0x2f, 0x3e, 0x3d, 0x56, 0x24, 0x9e, 0x2a, 0x12, 0xbf, 0x2a, 0x12, 0xcf, 0x15,
	0xc1, 0x4b, 0x45, 0xf0, 0x5a, 0x11, 0x3c, 0x78, 0x82, 0xef, 0x9e, 0xe0, 0x87, 0x27, 0xf8, 0xe9,
	0x09, 0x1e, 0x3d, 0xc1, 0x93, 0x27, 0xf1, 0xec, 0x09, 0xfe, 0x7a, 0x12, 0x2f, 0x9e, 0xe0, 0xd5,
	0x93, 0x78, 0xf8, 0x43, 0xc2, 0x34, 0xeb, 0x1a, 0xa5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x34,
	0x55, 0x0b, 0x2b, 0x98, 0x02, 0x00, 0x00,
}
